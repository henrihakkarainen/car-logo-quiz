[{"/usr/src/app/src/index.js":"1","/usr/src/app/src/reportWebVitals.js":"2","/usr/src/app/src/App.js":"3","/usr/src/app/src/components/LanguageSelection.js":"4","/usr/src/app/src/i18n.js":"5","/usr/src/app/src/components/Home.js":"6","/usr/src/app/src/components/Games.js":"7","/usr/src/app/src/components/Category.js":"8","/usr/src/app/src/components/Navigation.js":"9","/usr/src/app/src/components/LoginForm.js":"10","/usr/src/app/src/components/ModalForm.js":"11","/usr/src/app/src/components/RegisterForm.js":"12","/usr/src/app/src/components/Play.js":"13","/usr/src/app/src/components/Game.js":"14","/usr/src/app/src/components/ProgressBar.js":"15"},{"size":683,"mtime":1613125745218,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611927386097,"results":"18","hashOfConfig":"17"},{"size":1659,"mtime":1613478320346,"results":"19","hashOfConfig":"17"},{"size":953,"mtime":1613314007944,"results":"20","hashOfConfig":"17"},{"size":668,"mtime":1612374102675,"results":"21","hashOfConfig":"17"},{"size":270,"mtime":1613398217188,"results":"22","hashOfConfig":"17"},{"size":980,"mtime":1613489014718,"results":"23","hashOfConfig":"17"},{"size":1119,"mtime":1613479222128,"results":"24","hashOfConfig":"17"},{"size":2722,"mtime":1613320528431,"results":"25","hashOfConfig":"17"},{"size":3291,"mtime":1613562795416,"results":"26","hashOfConfig":"17"},{"size":1663,"mtime":1613473176662,"results":"27","hashOfConfig":"17"},{"size":7019,"mtime":1613471849388,"results":"28","hashOfConfig":"17"},{"size":1858,"mtime":1613842747310,"results":"29","hashOfConfig":"17"},{"size":9178,"mtime":1613846893176,"results":"30","hashOfConfig":"17"},{"size":515,"mtime":1613735230820,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1twsez5",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"/usr/src/app/src/index.js",[],["72","73"],"/usr/src/app/src/reportWebVitals.js",[],"/usr/src/app/src/App.js",["74"],"import { useState } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport Container from 'react-bootstrap/Container';\n\nimport './App.css';\nimport 'react-responsive-modal/styles.css';\nimport LanguageSelection from './components/LanguageSelection';\nimport Navigation from './components/Navigation';\nimport Home from './components/Home';\nimport Games from './components/Games';\nimport Play from './components/Play';\nimport Modal from './components/ModalForm';\n\nconst App = () => {\n  const [ language, setLanguage ] = useState(localStorage.getItem('language'));\n  const [ showLogin, setShowLogin ] = useState(false);\n  const [ t, i18n ] = useTranslation();\n\n  const onChangeLanguage = (lang) => {\n    localStorage.setItem('language', lang);\n    i18n.changeLanguage(lang);\n    setLanguage(lang);\n  }\n\n  const onOpenLogin = () => setShowLogin(true);\n  const onCloseLogin = () => setShowLogin(false);\n\n  if (language === 'fi' || language === 'en') {\n    return (\n      <>\n      <Router>\n        <Container>\n          <Navigation lang={language}\n                      openLoginForm={onOpenLogin}\n                      onChangeLanguage={onChangeLanguage}\n                      router={Router.router} />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/games\" component={Games} />\n          <Route path=\"/play\" component={Play} />\n        </Container>\n      </Router>\n      <Modal show={showLogin} onHide={onCloseLogin} />\n      </>\n    )\n  } else {\n    return (\n      <LanguageSelection onChangeLanguage={onChangeLanguage}/>\n    );\n  }\n}\n\nexport default App;\n","/usr/src/app/src/components/LanguageSelection.js",[],"/usr/src/app/src/i18n.js",[],"/usr/src/app/src/components/Home.js",[],"/usr/src/app/src/components/Games.js",["75"],"import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport axios from 'axios';\nimport Category from './Category';\nimport Typography from '@material-ui/core/Typography';\n\nimport '../styles/Games.css';\n\nconst Games = (props) => {\n  const [ t, i18n ] = useTranslation();\n  const [ categoryList, setCategoryList ] = useState([]);\n\n  useEffect(() => {\n    axios.get('http://localhost:8080/api/categories/published')\n      .then((res) => {\n        console.log(res.data)\n        setCategoryList(res.data);\n      })\n  }, [])\n\n  return (\n    <div className=\"categories\">\n      <Typography variant=\"h4\">\n        {t('selectCategory')}\n      </Typography>\n      {categoryList.map(item =>\n        <Category key={item.id}\n                  title={item.title}\n                  description={item.description}\n                  bgUrl={item.backgroundImageURL} />\n      )}\n      <br />\n      <p>{t('toBeAdded')}</p>\n    </div>\n  );\n}\n\nexport default Games;","/usr/src/app/src/components/Category.js",["76"],"import { useTranslation } from 'react-i18next';\nimport Card from 'react-bootstrap/Card';\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\n\nimport placeholder from '../images/background/category_default.png';\n\nconst Category = (props) => {\n  const [ t, i18n ] = useTranslation();\n\n  return (\n    <Card border=\"dark\">\n      <Card.Img\n        src={props.bgUrl ? `http://localhost:8080${props.bgUrl}` : placeholder}\n      />\n\n      <Card.Body>\n        <Card.Title>{props.title[i18n.language]}</Card.Title>\n        <Card.Text>{props.description[i18n.language]}</Card.Text>\n      </Card.Body>\n      <ListGroup>\n        <ListGroupItem>\n          <LinkContainer to={`/play?category=${props.title['en'].toLowerCase()}`}>\n            <Card.Link>Play</Card.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/highscores\">\n            <Card.Link>High scores</Card.Link>\n          </LinkContainer>\n        </ListGroupItem>\n      </ListGroup>\n    </Card>\n    \n  )\n}\n\nexport default Category;","/usr/src/app/src/components/Navigation.js",[],"/usr/src/app/src/components/LoginForm.js",["77"],"import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PersonIcon from '@material-ui/icons/Person';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nconst LoginForm = (props) => {\n  const [ t, i18n ] = useTranslation();\n  const [ rememberMe, setRememberMe ] = useState(false);\n  const [ viewPassword, setViewPassword ] = useState(false);\n  const [ error, setError ] = useState(false);\n  const [ errorMsg, setErrorMsg ] = useState('');\n\n  const togglePasswordVisibility = () => {\n    setViewPassword(!viewPassword);\n  }\n\n  const onHandleLogin = () => {\n    setError(true);\n    setErrorMsg('Error?')\n  }\n\n  return (\n    <Form className=\"align-items-center\">\n      {error ? <Alert variant=\"danger\">{errorMsg}</Alert> : ''}\n      <Form.Group>\n        <Form.Label>{t('username')}</Form.Label>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text>\n              <PersonIcon />\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <Form.Control type=\"text\" placeholder={t('login.enterUsername')} />\n        </InputGroup>\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label>{t('password')}</Form.Label>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text className=\"form-password\"\n              onClick={togglePasswordVisibility}>\n              <Tooltip title={viewPassword ? t('login.hidePassword') : t('login.viewPassword')}>\n                {viewPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n              </Tooltip>\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <Form.Control type={viewPassword ? 'text' : 'password'}\n            placeholder={t('login.enterPassword')} />\n        </InputGroup>\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Check\n          type=\"checkbox\"\n          label={t('login.rememberMe')}\n          checked={rememberMe}\n          onChange={() => setRememberMe(!rememberMe)} />\n      </Form.Group>\n\n      <Button block className=\"mb-2\" onClick={onHandleLogin}>\n        {t('loginBtn')}\n      </Button>\n      <Grid container>\n        <Grid item xs>\n          <Typography variant=\"body2\">\n            <Link\n              className=\"form-link\"\n              variant=\"body2\"\n              onClick={() => props.setMode('forgot')}\n            >\n              {t('login.forgotPassword')}\n            </Link>\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body2\">\n            {t('login.noAccount')}\n            <br />\n            <Link\n              className=\"form-link\"\n              variant=\"body2\"\n              onClick={() => props.setMode('register')}\n            >\n              {t('login.signUp')}\n            </Link>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Form>\n  );\n}\n\nexport default LoginForm;","/usr/src/app/src/components/ModalForm.js",["78","79"],"import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Modal from 'react-bootstrap/Modal';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nimport LoginForm from './LoginForm';\nimport RegisterForm from './RegisterForm';\n\nimport '../styles/ModalForm.css';\n\nconst Forgot = (props) => {\n  const [ t, i18n ] = useTranslation();\n  return (\n    <div>\n      <Typography>\n        {t('forgotPassword.info')}\n      </Typography>\n      <br />\n      <Typography variant=\"body2\">\n        <Link\n          className=\"form-link\"\n          variant=\"body2\"\n          onClick={() => props.setMode('login')}\n        >\n          {t('forgotPassword.back')}\n        </Link>\n      </Typography>\n    </div>\n  );\n}\n\nconst ModalForm = (props) => {\n  const [ t, i18n ] = useTranslation();\n  const [ mode, setMode ] = useState('login');\n\n  const onChangeForm = (view) => {\n    setMode(view);\n  }\n\n  return (\n    <Modal\n      show={props.show}\n      onHide={props.onHide}\n      centered\n      backdrop=\"static\"\n      restoreFocus={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          { mode === 'login' ?\n            t('loginBox') :\n            mode === 'register'\n            ? t('signup.title')\n            : t('forgotPassword.title') }\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        { mode === 'login' ?\n          <LoginForm setMode={onChangeForm} /> :\n          mode === 'register' ?\n          <RegisterForm setMode={onChangeForm} /> :\n          <Forgot setMode={onChangeForm}/>\n        }\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default ModalForm;","/usr/src/app/src/components/RegisterForm.js",["80","81","82","83"],"import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nconst RegisterForm = (props) => {\n  const [ username, setUsername ] = useState('');\n  const [ usernameError, setUsernameError ] = useState('');\n  const [ email, setEmail ] = useState('');\n  const [ emailError, setEmailError ] = useState('');\n  const [ password, setPassword ] = useState('');\n  const [ passwordError, setPasswordError ] = useState('');\n  const [ showPassword, setShowPassword ] = useState(false);\n  const [ rePassword, setRePassword ] = useState('');\n  const [ rePasswordError, setRePasswordError ] = useState('');\n  const [ showRePassword, setShowRePassword ] = useState(false);\n  const [ error, setError ] = useState(false);\n  const [ errorMsg, setErrorMsg ] = useState('Error?');\n  const [ t, i18n ] = useTranslation();\n\n  const errorMessages = {\n    username: {\n      required: t('signup.usernameRequired'),\n      short: t('signup.usernameShort')\n    },\n    email: {\n      required: t('signup.emailRequired'),\n      validity: t('signup.emailValidity')\n    },\n    password: {\n      required: t('signup.passwordRequired'),\n      match: t('signup.passwordsNoMatch'),\n      short: t('signup.passwordShort')\n    }\n  };\n\n  const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  const verifyInput = () => {\n    let verifyOk = true;\n\n    if (!username) {\n      verifyOk = false;\n      setUsernameError(errorMessages.username.required);\n    }\n    if (username && username.length < 3) {\n      verifyOk = false;\n      setUsernameError(errorMessages.username.short);\n    }\n    if (!email) {\n      verifyOk = false;\n      setEmailError(errorMessages.email.required);\n    }\n    if (email && !email.match(emailRegex)) {\n      verifyOk = false;\n      setEmailError(errorMessages.email.validity);\n    }\n    if (!password) {\n      verifyOk = false;\n      setPasswordError(errorMessages.password.required);\n    }\n    if (!rePassword) {\n      verifyOk = false;\n      setRePasswordError(errorMessages.password.required);\n    }\n    if (password && password.length < 6) {\n      verifyOk = false;\n      setPasswordError(errorMessages.password.short);\n    }\n    if (password && password.length >= 6 && password !== rePassword) {\n      verifyOk = false;\n      setPasswordError(errorMessages.password.match);\n    }\n    if (rePassword && rePassword.length < 6) {\n      verifyOk = false;\n      setRePasswordError(errorMessages.password.short);\n    }\n    if (rePassword && rePassword.length >= 6 && password !== rePassword) {\n      verifyOk = false;\n      setRePasswordError(errorMessages.password.match);\n    }\n    return verifyOk;\n  }\n\n  const onSubmit = () => {\n    const canSubmit = verifyInput();\n    if (canSubmit) {\n      console.log('sending')\n    } else setError(true)\n  }\n\n  return (\n    <Form>\n      {error ? <Alert variant=\"danger\">{errorMsg}</Alert> : ''}\n      <TextField\n        label={t('username')}\n        style={{ marginBottom: 10 }}\n        placeholder={t('signup.enterUsername')}\n        error={usernameError ? true : false}\n        fullWidth\n        margin=\"normal\"\n        helperText={usernameError}\n        InputLabelProps={{\n          shrink: true, required: true\n        }}\n        variant=\"outlined\"\n        onChange={(e) => {\n          if (e.target.value && usernameError) setUsernameError('')\n          setUsername(e.target.value)\n        }}\n      />\n      <TextField\n        label={t('email')}\n        style={{ marginBottom: 10 }}\n        placeholder=\"user@email.com\"\n        error={emailError ? true : false}\n        fullWidth\n        margin=\"normal\"\n        helperText={emailError}\n        InputLabelProps={{\n          shrink: true, required: true\n        }}\n        variant=\"outlined\"\n        onChange={(e) => {\n          if (e.target.value && emailError) setEmailError('')\n          setEmail(e.target.value)\n        }}\n      />\n      <TextField\n        label={t('password')}\n        type={showPassword ? 'text' : 'password'}\n        style={{ marginBottom: 10 }}\n        placeholder={t('signup.enterPassword')}\n        error={passwordError ? true : false}\n        fullWidth\n        margin=\"normal\"\n        helperText={passwordError}\n        InputLabelProps={{\n          shrink: true, required: true\n        }}\n        variant=\"outlined\"\n        onChange={(e) => {\n          if (e.target.value && passwordError) setPasswordError('')\n          if (rePasswordError === errorMessages.password.match) setRePasswordError('')\n          setPassword(e.target.value)\n        }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"Toggle password visibility\"\n              onClick={() => setShowPassword(!showPassword)}\n              onMouseDown={(e) => e.preventDefault()}\n              edge=\"end\"\n            >\n              {showPassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n          ),\n         }}\n      />\n      <TextField\n        label={t('rePassword')}\n        type={showRePassword ? 'text' : 'password'}\n        style={{ marginBottom: 20 }}\n        placeholder={t('signup.retypePassword')}\n        error={rePasswordError ? true : false}\n        fullWidth\n        margin=\"normal\"\n        helperText={rePasswordError}\n        InputLabelProps={{\n          shrink: true, required: true\n        }}\n        variant=\"outlined\"\n        onChange={(e) => {\n          if (e.target.value && rePasswordError) setRePasswordError('')\n          if (passwordError === errorMessages.password.match) setPasswordError('')\n          setRePassword(e.target.value)\n        }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"Toggle password visibility\"\n              onClick={() => setShowRePassword(!showRePassword)}\n              onMouseDown={(e) => e.preventDefault()}\n              edge=\"end\"\n            >\n              {showRePassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n          ),\n         }}\n      />\n      <Button block className=\"mb-3\" onClick={onSubmit}>\n        {t('signup.createAccount')}\n      </Button>\n      <Typography variant=\"body2\">\n        {t('signup.haveAccount')}\n        &nbsp;\n        <Link className=\"form-link\" variant=\"body2\" onClick={() => props.setMode('login')}>\n          {t('signup.login')}\n        </Link>\n      </Typography>\n    </Form>\n  );\n}\n\nexport default RegisterForm;","/usr/src/app/src/components/Play.js",["84","85","86"],"import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\nimport Game from './Game';\n\nimport '../styles/Game.css';\n\nconst Loading = ({ t }) => {\n  return (\n    <div>\n      <CircularProgress />\n      <br />\n      <Typography variant=\"body1\">\n        {t('game.loading')}\n      </Typography>\n    </div>    \n  );\n}\n\nconst Error = (props) => {\n  return (\n    <div>\n      Game \"{props.title.toUpperCase()}\" was not found\n    </div>\n  );\n}\n\nconst Play = () => {\n  \n  const useQuery = () => {\n    return new URLSearchParams(useLocation().search);\n  }\n\n  const [ t, i18n ] = useTranslation();\n  const [ category, setCategory ] = useState(useQuery().get('category'))\n  const [ game, setGame ] = useState(null);\n  const [ gameData, setGameData ] = useState(null);\n  const [ loading, setLoading ] = useState(true);\n\n  useEffect(() => {\n    axios.get(`http://localhost:8080/api/categories/published?title=${category}`)\n      .then(res => {\n        setGame(res.data[0])\n      })\n  }, [category])\n\n  useEffect(() => {\n    if (game) {\n      axios.get(`http://localhost:8080/api/questions?category=${game.title?.en}`)\n        .then(res => {\n          setGameData(res.data)\n          setLoading(false)\n        })\n    } else if (game !== null) {\n      setLoading(false);\n    }\n  }, [game])\n  \n  return (\n    <div className=\"game-container\">\n      {\n        loading ?\n        <Loading t={t} /> :\n        game && Array.isArray(gameData) && gameData.length !== 0 ?\n        <Game game={game} questions={gameData} /> :\n        <Error title={category} />\n      }\n    </div>\n  );\n}\n\nexport default Play;","/usr/src/app/src/components/Game.js",["87"],"import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport _ from 'lodash';\nimport Button from '@material-ui/core/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Typography from '@material-ui/core/Typography';\n\nimport DoneIcon from '@material-ui/icons/Done';\nimport Remove2Icon from '@material-ui/icons/ExposureNeg2';\nimport RedoIcon from '@material-ui/icons/Redo';\n\nimport ProgressBar from './ProgressBar';\n\nconst StartScreen = (props) => {\n  const { t, title, description, handleStart } = props;\n\n  return (\n    <div className=\"start-screen\">\n      <Typography variant=\"h4\">\n        {title}\n      </Typography>\n      <Typography>\n        {description}\n      </Typography>\n      <Typography>\n        {t('game.description')}\n      </Typography>\n      <Typography>\n        {t('game.goodLuck')}\n      </Typography>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleStart}>\n        {t('game.start')}\n      </Button>\n    </div>\n  );\n}\n\nconst Game = (props) => {\n  const { game, questions } = props;\n  const [ t, i18n ] = useTranslation();\n  const [ playing, setPlaying ] = useState(false);\n  const [ score, setScore ] = useState(0);\n  const [ addedPoints, setAddedPoints ] = useState(0);\n  const [ currentQuestion, setCurrentQuestion ] = useState(null);\n  const [ round, setRound ] = useState(1);\n  const [ timeLeft, setTimeLeft ] = useState(10000);\n  const [ timeRunning, setTimeRunning ] = useState(false);\n  const [ percent, setPercent ] = useState(1);\n  const [ lifelinesUsed, setLifelinesUsed ] = useState({\n    fiftyfifty: false,\n    skip: false\n  });\n  const [ hide, setHide ] = useState(false);\n\n  const buttonClasses = {\n    correct: 'correct-choice',\n    wrong: 'wrong-choice'\n  };\n\n  \n  useEffect(() => {\n    // console.log(timeLeft)\n    setPercent(calculatePercent());\n  }, [ timeLeft ])\n  \n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (playing && timeRunning) setTimeLeft(calculateTimeLeft())\n    }, 200)\n    return () => clearTimeout(timer)   \n  })\n\n  const onHandleGameStart = () => {\n    pickRandomQuestion(round);\n    setScore(0);\n    setLifelinesUsed({ fiftyfifty: false, skip: false });\n    setTimeLeft(10000);\n    setPlaying(true);\n    setTimeRunning(true);\n  }\n\n  const onHandleGameEnd = () => {\n    setPlaying(false);\n    setRound(1);\n  }\n\n  const onChooseRight = (e) => {\n    if (e.target.localName === 'span')\n      e.target.parentElement.classList.add(buttonClasses.correct);\n    else\n      e.target.classList.add(buttonClasses.correct);\n\n    const countPoints = calculatePositiveScore();\n    setAddedPoints(countPoints)\n    setTimeout(() => {\n      e.target.classList.remove(buttonClasses.correct);\n      e.target.parentElement.classList.remove(buttonClasses.correct);\n      if (round !== 10) {\n        setHide(false);\n        pickRandomQuestion(round + 1);\n        setScore(score + countPoints)\n        setRound(round + 1);\n        setTimeLeft(10000);\n        setTimeRunning(true);\n      } else {\n        setScore(score + countPoints)\n        onHandleGameEnd();\n      }\n    }, 1500)\n    \n  }\n\n  const onChooseWrong = (e) => {\n    if (e.target.localName === 'span')\n      e.target.parentElement.classList.add(buttonClasses.wrong);\n    else\n      e.target.classList.add(buttonClasses.wrong);\n\n    const countPoints = calculateNegativeScore();\n    setAddedPoints(countPoints)\n    setTimeout(() => {\n      e.target.classList.remove(buttonClasses.wrong);\n      e.target.parentElement.classList.remove(buttonClasses.wrong);\n      setScore(score + addedPoints)\n      onHandleGameEnd();\n    }, 1500)\n  }\n\n  const onHandleSkip = () => {\n    setAddedPoints(score < 500 ? -score : -500);\n    setTimeout(() => {\n      pickRandomQuestion(round + 1);\n      setLifelinesUsed({ ...lifelinesUsed, skip: true });\n      setScore(score < 500 ? 0 : score - 500);\n      setRound(round + 1);\n      setTimeLeft(10000);\n      setTimeRunning(true);\n    }, 750)\n  }\n\n  const onHandleRemoveTwo = () => {\n    setHide(true);\n    setLifelinesUsed({ ...lifelinesUsed, fiftyfifty: true });\n  }\n\n  const calculateTimeLeft = () => {\n    return timeLeft !== 0 ? timeLeft - 200 : 0;\n  }\n\n  const calculatePercent = () => {\n    return timeLeft / 10000;\n  }\n\n  // Minimum score for a correct answer is 100 points\n  const calculatePositiveScore = () => {\n    const score = Number.parseInt(timeLeft * (round / 3) / 5);\n    return score < 100 ? 100 : score;\n  }\n\n  const calculateNegativeScore = () => {\n    const minusScore = Number.parseInt(round * 95);\n    return minusScore > score ? -score : -minusScore;\n  }\n\n  const pickRandomQuestion = (round) => {\n    // Get possible questions for the current round\n    const questionsByRound = _.filter(questions, (question) => \n      question.difficulty === round);\n\n    // Randomly pick one question\n    const pickOne = _.sample(questionsByRound);\n\n    const shuffled = _.shuffle(pickOne.options).slice(0, 3);\n    \n    // Shuffle a list of 4 choices that are answer alternatives, one of them\n    // is of course the correct choice (using spread syntax here)\n    const choices = [\n      ...shuffled,\n      pickOne.correct\n    ];\n\n    // Determine which questions will get removed when fifty-fifty is used\n    const hideTwo = shuffled.slice(0, 2);\n\n    setCurrentQuestion({\n      ...pickOne,\n      choices: _.shuffle(choices),\n      hide: hideTwo\n    });\n  }\n\n  const renderGame = () => {\n    return (\n      <Container>\n        <Row className=\"game-title\">\n          <Col>\n            <Typography variant=\"h4\">{game.title[i18n.language]}</Typography>\n          </Col>\n        </Row>\n        <Row>\n          <Col \n            className={`align-right font-sizing ${timeRunning || addedPoints === 0 ? 'add-score' : ''}`}\n            style={{ color: `${addedPoints < 0 ? 'red' : 'green'}` }}\n          >\n            {`${addedPoints < 0 ? '-' : '+'} ${Math.abs(addedPoints)} ${t('game.points')}`}\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"align-left font-sizing\">{t('game.progress')}: {round} / 10</Col>\n          <Col className=\"align-right font-sizing\">{t('game.score')}: {score}</Col>\n        </Row>\n        <Row className=\"logo-and-questions\">\n          <Col sm={12} md={6}>\n            <img className=\"game-logo\" src={`http://localhost:8080${currentQuestion.imageURL}`} alt=\"logo\" />\n          </Col>\n          <Col sm={12} md={6} style={{ margin: 'auto' }}>\n            {\n              currentQuestion.choices.map((option, i) => {\n                return (\n                  <Row className=\"question-row\" key={i}>\n                    <Button\n                      className=\"q-button\"\n                      variant=\"outlined\"\n                      style={{ visibility: `${hide && currentQuestion.hide.includes(option) ? 'hidden' : 'visible'}` }}\n                      onClick={(e) => {\n                        if (timeRunning) {\n                          setTimeRunning(false);\n                          option === currentQuestion.correct ? onChooseRight(e) : onChooseWrong(e)\n                        }\n                       }}\n                    >\n                        {option}\n                    </Button>\n                  </Row>\n                );\n              })\n            }\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} sm={6} className=\"align-left\">\n            <Row style={{ margin: 0 }}>\n              <Button\n                className=\"lifeline-btn\"\n                startIcon={<Remove2Icon />}\n                variant=\"outlined\"\n                disabled={lifelinesUsed.fiftyfifty}\n                onClick={() => {\n                  if (timeRunning) {\n                    onHandleRemoveTwo();\n                  }\n                }}\n              >\n                {t('game.removeTwo')}\n              </Button>\n              <Button\n                className=\"lifeline-btn\"\n                startIcon={<RedoIcon />}\n                variant=\"outlined\"\n                disabled={lifelinesUsed.skip || round === 10}\n                onClick={() => {\n                  if (timeRunning) {\n                    setTimeRunning(false);\n                    onHandleSkip();\n                  }\n                }}\n              >\n                {t('game.skip')}\n              </Button>\n            </Row>\n          </Col>\n          <Col xs={12} sm={6} className=\"align-right end-game-btn\">\n            <Button\n              className=\"lifeline-btn\"\n              startIcon={<DoneIcon />}\n              variant=\"outlined\"\n            >\n              {t('game.endHere')}\n            </Button>\n          </Col>\n        </Row>\n        <Row style={{ margin: '20px -30px 0' }}>\n          <Col sm={12}>\n            <ProgressBar percent={percent}/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <div className=\"game\">\n      {\n        playing ?\n        renderGame() :\n        <StartScreen\n          title={game.title[i18n.language]}\n          description={game.description[i18n.language]}\n          handleStart={onHandleGameStart}\n          t={t} />\n      }\n    </div>\n  );\n}\n\nexport default Game;","/usr/src/app/src/components/ProgressBar.js",[],["88","89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":18,"column":11,"nodeType":"96","messageId":"97","endLine":18,"endColumn":12},{"ruleId":"94","severity":1,"message":"98","line":10,"column":14,"nodeType":"96","messageId":"97","endLine":10,"endColumn":18},{"ruleId":"94","severity":1,"message":"95","line":10,"column":11,"nodeType":"96","messageId":"97","endLine":10,"endColumn":12},{"ruleId":"94","severity":1,"message":"98","line":16,"column":14,"nodeType":"96","messageId":"97","endLine":16,"endColumn":18},{"ruleId":"94","severity":1,"message":"98","line":13,"column":14,"nodeType":"96","messageId":"97","endLine":13,"endColumn":18},{"ruleId":"94","severity":1,"message":"98","line":34,"column":14,"nodeType":"96","messageId":"97","endLine":34,"endColumn":18},{"ruleId":"94","severity":1,"message":"99","line":26,"column":21,"nodeType":"96","messageId":"97","endLine":26,"endColumn":32},{"ruleId":"94","severity":1,"message":"98","line":27,"column":14,"nodeType":"96","messageId":"97","endLine":27,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":45,"column":29,"nodeType":"102","messageId":"103","endLine":45,"endColumn":30,"suggestions":"104"},{"ruleId":"100","severity":1,"message":"101","line":45,"column":45,"nodeType":"102","messageId":"103","endLine":45,"endColumn":46,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"106","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":14},{"ruleId":"94","severity":1,"message":"98","line":40,"column":14,"nodeType":"96","messageId":"97","endLine":40,"endColumn":18},{"ruleId":"94","severity":1,"message":"107","line":41,"column":21,"nodeType":"96","messageId":"97","endLine":41,"endColumn":32},{"ruleId":"108","severity":1,"message":"109","line":66,"column":6,"nodeType":"110","endLine":66,"endColumn":18,"suggestions":"111"},{"ruleId":"90","replacedBy":"112"},{"ruleId":"92","replacedBy":"113"},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'t' is assigned a value but never used.","Identifier","unusedVar","'i18n' is assigned a value but never used.","'setErrorMsg' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["116","117"],["118","119"],"'Button' is defined but never used.","'setCategory' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculatePercent'. Either include it or remove the dependency array.","ArrayExpression",["120"],["114"],["115"],"no-global-assign","no-unsafe-negation",{"messageId":"121","fix":"122","desc":"123"},{"messageId":"124","fix":"125","desc":"126"},{"messageId":"121","fix":"127","desc":"123"},{"messageId":"124","fix":"128","desc":"126"},{"desc":"129","fix":"130"},"removeEscape",{"range":"131","text":"132"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"133","text":"134"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"135","text":"132"},{"range":"136","text":"134"},"Update the dependencies array to be: [calculatePercent, timeLeft]",{"range":"137","text":"138"},[1762,1763],"",[1762,1762],"\\",[1778,1779],[1778,1778],[1935,1947],"[calculatePercent, timeLeft]"]